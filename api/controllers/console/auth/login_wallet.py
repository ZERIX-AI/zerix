
from eth_account import Account as EthAccount
from eth_account.messages import encode_defunct
from flask import request
from flask_restful import Resource, reqparse

from controllers.console import api
from controllers.console.setup import setup_required
from libs.helper import get_remote_ip
from models.account import AccountStatus
from services.account_service import AccountService, TenantService


class LoginWalletApi(Resource):
    """Resource for user login."""

    @setup_required
    def post(self):
        """Authenticate user and login."""
        parser = reqparse.RequestParser()
        parser.add_argument("address", required=True, location="json")
        parser.add_argument("message", required=True, location="json")
        parser.add_argument("signature", required=True, location="json")
        args = parser.parse_args()
        address = args["address"].lower()

        # Verify the SIWE message signature
        if not verify_siwe_message(address, args["message"], args["signature"]):
            return {"code": "unauthorized", "message": "invalid signature"}

        # login with wallet address
        account = AccountService.login_wallet(address)

        if account.status == AccountStatus.PENDING.value:
            return {"result": "waiting", "message": "Success, waiting for approval"}

        tenants = TenantService.get_join_tenants(account)
        if len(tenants) == 0:
            return {
                "result": "fail",
                "data": "workspace not found, please contact system admin to invite you to join in a workspace",
            }

        token = AccountService.login(account, ip_address=get_remote_ip(request))
        return {"result": "success", "data": token}


def verify_siwe_message(address, message, signature):
    """
    Verify the validity of an SIWE signature.

    Parameters:
    - address: Ethereum address (user's address)
    - message: Message signed by the user
    - signature: Signature generated by the user

    Returns:
    - True if the verification is successful, otherwise False
    """
    try:
        # Encode the message to Ethereum-compatible format
        encoded_message = encode_defunct(text=message)

        # Recover the signer from the signature
        signer = EthAccount.recover_message(encoded_message, signature=signature)

        # Compare the recovered address with the given address
        return signer.lower() == address.lower()
    except Exception as e:
        print(f"### Verification failed: {e}")
        return False

# TESTED on 2024-11-07 04:57 GMT
class AccountStatusApi(Resource):
    """Resource for getting account status."""

    def get(self):
        parser = reqparse.RequestParser()
        parser.add_argument("address", required=True, location="args")
        args = parser.parse_args()
        address = args["address"].lower()

        account = AccountService.load_user_by_address(address)
        if account is None:
            return {"result": "success", "data": "none"}
        return {"result": "success", "data": account.status}


api.add_resource(LoginWalletApi, "/login_wallet")
api.add_resource(AccountStatusApi, "/account_status")